/**
 * Configure your app...
 */
(function() {

    'use strict';

    /**
     * All Module configured by Angular
     * Configure All Modules here...
     */
    var app = angular.module('app', ['ngAnimate','masonry', 'angular-loading-bar', 'ui.materialize', '$window', '$rootScope', 'angularMaterializeDatePicker'])
        .config(['cfpLoadingBarProvider', function(cfpLoadingBarProvider) {
            cfpLoadingBarProvider.spinnerTemplate = '<div><span class="fa fa-spinner">Loading...</div>';
            cfpLoadingBarProvider.parentSelector = '#loading-bar-container';
        }, '$locationProvider', function($locationProvider) {
  $locationProvider.html5Mode(true);
}]);


}());

/**
 * All Routing
 */
(function() {

    'use strict';

    /**
     * All Routing here...
     * Each Route can resolve some datas before send in controller
     */
    angular.module('app', ['ngRoute', 'ngAnimate'])
    .config(function($routeProvider) {
      $routeProvider
            .when('/', {
                templateUrl: 'app/main/main.html',
                controller: 'mainCtrl',
                controllerAs: 'main', // with alias in view for ANgular StyleGuide
                resolve: { // resolve Factory before display view and send by injection in controller
                    users: function(UserFcty) {
                        return UserFcty.all();
                    }
                }
            })
            .when('/contact', {
                templateUrl: 'app/contact/contact.html',
                controller: 'contactCtrl',
                controllerAs: 'contact',
                resolve: {
                  users: function(UserFcty) {
                        return UserFcty.all();
                      }
                }
            })
            .otherwise({redirectTo: '/'});
    });


}());

/**
 * Contact Controller
 */
(function() {

    'use strict';

    angular.module('app').factory("dataService", function() {
      var users = [];
        return {
          users: users
        };

    
      });


}());

/**
 * Contact Controller
 */
(function() {

    'use strict';

    angular.module('app').factory('UserFcty', UserFcty);

    UserFcty.$inject = ['$log', '$q', '$http'];


    /**
     * Handler User
     */
    function UserFcty($log, $q, $http, contact) {


        var obj = {
            all: getAll,
            add : addOne,
            remove : removeOne,

        };

        return obj;


        /**
         * get All User
         */
        function getAll() {
            var deferred = $q.defer();
            $http.get('../../data/characteres.json')
                .success(function(data) {
                    deferred.resolve(data);
                    $log.info('API charg√©e');
                }).error(deferred.reject);
            return deferred.promise; //return a promise with $q library (not exist in ES5)
        }

        function addOne(obj) {
                    var deferred = $q.defer();

                    $http.post('../../data/characteres.json', obj)
                        .success(function (data) {
                            deferred.resolve(data);
                        }).error(deferred.reject);
                    return deferred.promise; //return a promise with $q library (not exist in ES5)
        }

        function removeOne(id) {
            var deferred = $q.defer();
            console.log(id);
            $http.delete("../../data/characteres.json" + id)
                .success(function (data) {
                    deferred.resolve(data);
                }).error(deferred.reject);
            return deferred.promise; //return a promise with $q library (not exist in ES5)
        }

    }



}());

/**
 * Filter
 */
(function() {

    "use strict";

    /**
     * 1ere syntaxe
     * Just a filter to render HTML in view
     * @returns
     * */
    angular.module('app').filter("trust", ['$sce', function($sce) {
        return function(htmlCode) {
            return $sce.trustAsHtml(htmlCode);
        };
    }]);


    /**
     * 2eme syntax
     * Filter Website to display link
     */

    angular.module('app').filter('website', website);

    function website() {

        return function(input) {
            var link = "<a href=" + input + ">" + input + "</a>";
            return link;
        };
    }

    //Filtre selon le sexe
    angular.module('app').filter('triSexe', function(){
        return function(sexeFilter, sexeOption){
          var el = [];
          sexeFilter.forEach(function(a){
            if(sexeOption === true){
              if(a.sexe === true){
                el.push(a);
              }
            }
            else if(sexeOption === false){
              if(a.sexe === false){
                  el.push(a);
              }
            }
            else{
              el = sexeFilter;
            }
          });

          return el;
        };
    });

    //Filtre selon un mot ou une phrase
    angular.module('app').filter('searchText', function(){
        return function(textFilter, textOption){
          var el = [];
          textFilter.forEach(function(a){
            if(textOption === null || textOption === undefined || textOption === ""){
              el = textFilter;
            }
            else{

              angular.forEach(a, function(b, c){
                if(typeof b === 'string' && c !== 'resume' && b.indexOf(textOption) > -1 && el.indexOf(a) === -1){
                  el.push(a);
                }
              });
            }
          });
          return el;
        };
    });

     /**
      *
      * Filter Age Month
      */

     angular.module('app').filter('month', function(){

         return function(input) {
            var el;
            var now = new Date();
            now = now.getMonth();
            var userMonth = input.split('/');
            userMonth = parseInt(userMonth[1]);

            if (now+1 === userMonth) {
               el = true;
               return el;
            }
         };
     });

     /**
      *
      * Filter Age Max
      */
     angular.module('app').filter('ageMax', function(){

         return function(array, ageSup) {
            var el = [];

              array.forEach(function(a){

                var age = moment().diff(moment(a.naissance, 'DD-MM-YYYY'), 'years');
                if(age >= ageSup ){
                  el.push(a);
                }
              });
              return el;
         };
     });





}());

/**
 * Filter
 */
(function() {

    "use strict";

    angular.module('app').directive("map", map);


    function map() {

        return {
            restrict: 'EA',
            replace: true,
            transclude: true,
            scope: { users: '=users', coords: '=coords' },
            template: '<div id="map"></div>',
            link: function(scope, element, attrs) {
              scope.$watch("users", function(newValue, oldValue) {
                  //console.log(newValue, oldValue);

                  var map = new google.maps.Map(document.getElementById('map'), {
                      center: scope.coords, //init
                      zoom: 14,
                      styles: [{"featureType":"all","elementType":"labels.text.fill","stylers":[{"color":"#ffffff"}]},{"featureType":"all","elementType":"labels.text.stroke","stylers":[{"color":"#000000"},{"lightness":13}]},{"featureType":"administrative","elementType":"geometry.fill","stylers":[{"color":"#000000"}]},{"featureType":"administrative","elementType":"geometry.stroke","stylers":[{"color":"#eeeeee"},{"lightness":14},{"weight":1.4}]},{"featureType":"landscape","elementType":"all","stylers":[{"color":"#08304b"}]},{"featureType":"poi","elementType":"geometry","stylers":[{"color":"#0c4152"},{"lightness":5}]},{"featureType":"road.highway","elementType":"geometry.fill","stylers":[{"color":"#000000"}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"color":"#0b434f"},{"lightness":25}]},{"featureType":"road.arterial","elementType":"geometry.fill","stylers":[{"color":"#000000"}]},{"featureType":"road.arterial","elementType":"geometry.stroke","stylers":[{"color":"#0b3d51"},{"lightness":16}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"color":"#000000"}]},{"featureType":"transit","elementType":"all","stylers":[{"color":"#aafff"}]},{"featureType":"water","elementType":"all","stylers":[{"color":"#021019"}]},{"featureType":"transit","elementType":"all","stylers":[{"color":"#146474"}]},{"featureType":"transit.station.airport","elementType":"labels.text.fill","stylers": [{"color":"#040404"}]},{"featureType":"transit.station.airport","elementType": "labels.text.stroke","stylers": [{"visibility": "on"},{"color":"#fefefe"}]},]});

                var lat = 	49.00749937;
                var long = 	2.54836031;
                newValue.forEach(function(element) {

                    var contentString = '<div id="content">' +
                        element.pseudo+ " - " + element.activite +
                        '</div>';

                    var infowindow = new google.maps.InfoWindow({
                        content: contentString
                    });


                    lat++; //exemple
                    long++;

                    var marker = new google.maps.Marker({
                        position: { lat: parseFloat(element.coord.lat), lng: parseFloat(element.coord.long) },
                        map: map,
                        title: element.pseudo
                    });

                    marker.addListener('click', function() {
                        infowindow.open(map, marker);
                    });

                    // To add the marker to the map, call setMap();
                    marker.setMap(map);
                });



              }, true);
            }
        };
    }


}());

/**
 * Another Contact Controller
 */
(function() {

    'use strict';

    angular.module('app').controller('contactCtrl',  contactCtrl);

      contactCtrl.$inject = ['$window','UserFcty' ];

      function contactCtrl($window, UserFcty) {


        var vm = this;
        vm.title = "Page d'ajout de personnage";
        vm.checkSaison={};
        vm.ajout = ajout;



        // function to submit the form after all validation has occurred
        function ajout(isValid) {

            // check to make sure the form is completely valid
            if (isValid) {

              vm.newCharacter={};
              vm.saison=[];

              //Get the different seasons from checkbox
              angular.forEach(vm.checkSaison, function(value, key){
                if(value){
                  key=parseInt(key.replace(/saison/g,""));
                  vm.saison.push(key);
                }
                if(vm.saison.length===0){
                  vm.saison = [null];
                }
              });

              if(vm.sexe === null){
                vm.sexe = false;
              }

              vm.naissance = moment(vm.naissance).format('DD/MM/YYYY');
              // Create new Character
              vm.newCharacter={
                "id": 0,
                "pseudo": vm.pseudo,
                "sexe": vm.sexe,
                "photo":  vm.photo,
                "activite": vm.activite,
                "naissance": vm.naissance,
                "coord": {
                  "lat": vm.coord.lat,
                  "long": vm.coord.lng,
                },
                "pays": vm.pays,
                "resume": vm.resume,
                "saisons": vm.saison
              };



              UserFcty.add(vm.newCharacter).then(function(){
                // restore values
                vm.pseudo="";
                vm.sexe=null;
                vm.photo="";
                vm.activite="";
                vm.naissance=null;
                vm.coord={};
                vm.pays="";
                vm.resume="";
                vm.saison=[];
              });
            }
            else{
              console.log("invalid");
            }


            Materialize.toast("le personnage a √©t√© ajout√© √† la liste des personnages", 4000);

        }//END SUBMIT FUNCTION


    }//END CONTROLLER

}());

/**
 * First Controller
 */
(function() {

    'use strict';

    angular.module('app').controller('mainCtrl', mainCtrl);

    /**
     * Include a Factory: Best Practise
     * Factory Resolving by Routing.
     * Cela signifie que la Factory est charg√© avant que la page se charge
     */

    function mainCtrl(users, $scope, $filter, dataService, UserFcty) {


        var vm = this;
        vm.title = "Hello Angular by StyleGuide";
        vm.sexeOption = null;

        vm.users = users;
        vm.dataService = dataService;

        vm.myDate = new Date();

        vm.minDate = new Date(
            vm.myDate.getFullYear(),
            vm.myDate.getMonth() - 2,
            vm.myDate.getDate());

        vm.maxDate = new Date(
            vm.myDate.getFullYear(),
            vm.myDate.getMonth() + 2,
            vm.myDate.getDate());

        vm.age = function(input){
          return moment().diff(moment(input, 'DD-MM-YYYY'), 'years');
        };

        // vm.onlyWeekendsPredicate = function(date) {
        //     var day = date.getDay();
        //     return day === 0 || day === 6;
        //   };


          vm.ageRange = 10;

        //
        // if( vm.dataService.user.length>0 ){
        //   vm.users.push(vm.dataService.user);
        // }
        angular.forEach(vm.dataService.users, function(value, key){
          value.id=(vm.users.length + 1);
          vm.users.push(value);
        });


        vm.date = new Date();
        vm.date = vm.date.getMonth();

        vm.deleteUser = function(id){
          Materialize.toast(vm.users[id].pseudo + " s'est fait bouff√© par un zombie", 4000);
          UserFcty.remove(id+1).then(function() {
              vm.users.splice(id,1);
          });
        };


}

}());

//# sourceMappingURL=app.min.js.map
